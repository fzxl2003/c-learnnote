/*
1.浮点数精度不高问题
C语言在使用强制类型转换获取浮点数的整数部分时，是按照该浮点数在计算机内部的实际值进行操作的，而它所产生的结果有可能与我们的直觉不同。对于下面的代码，
int x;
float f =0.04;
x=(int)(f * 100) ;
printf("%d\n",x); //x=3
原因:f的实际数值略小于0.04，乘100的整数部分自然是3。
如果把变量f改为 double 类型，则输出结果是4。
 对于这类误差，应该根据计算的实际需要进行必要的处理。
 解决方法：上述例子需要避免数据的实际值由于精度不足而小于精确值，并由此引起计算错误，则可以将赋值语句改为
x=（int)（(f+ DEALT)*100);，其中DEALT是一个略大于数据精度误差的小数，如1e-6




2.数组整体复制函数
 memcpy(b,a,sizeof(a));   将a数组复制到b数组中，sizeof(a)可用n代替 表示复制个数

3.math.h中的乘幂函数pow(double,double)不能输出过大但小于long long的数





 */