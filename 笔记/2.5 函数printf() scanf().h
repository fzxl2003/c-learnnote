/*
printf()
 1.库： #include <stdio.h>
 2.常见用法： printf("格式说明字符串",...,...,...);
          ....为参数表，与字符串中的%一一对应
 3.printf()常用字段类型说明符  例2-8
 %d： － 以十进制方式输出带标记整数（正数默认不输出标记）； int 十进制
 %u： － 以十进制方式输出无标记整数；                   int 十进制
 %x   — 以十六进制方式输出整数                        int 十六进制
 %o： － 以八进制方式输出整数                         int 八进制
 %f： － 以小数方式输出单、双精度实数；                 double 小数方式
 %e： － 以指数方式输出单、双精度实数；                 double 科学计数法
 %g： － 以%f，%e中较短的输出宽度输出单、双精度实数；     double
 %c： － 输出单个字符；                              char
 %s： － 输出字符串。                                char*
  %lld  -以十进制方式输入长整型 （linux系统）         long long
 %I64d -以十进制方式输入长整型 （windows系统）       long long
 4.完整的字段说明序列
 %[flags] [width] [.precision] type
 flags 格式标志 width字段宽度 .precision精度 type类型(必填)
 5.flags 格式标志
  标志                  意义                                  缺省
   -                   结果左对齐，右边填空格                    结果右对齐
   +                   在有符号的数据前输出标记(正号或负号)        只对负数加符号
   0                   数据在字段宽度内加前导0                   不加前导0
   #                   对八进制和十六进制数（o,x,X）显现前缀O,Ox   不加前缀
                       对类型符e,f,g强制输出小数点               只在有小数值时输出小数点
 6.width字段宽度
  在%与字母之间  插入  整数  代表该字段的最小宽度
 7.precision精度
  在%与字母之间  插入  小数  代表要保留的小数位数   %.1f  //输出保留一位小数   %.2f  //输出保留二位小数   (位数不足以零补位)
 8.其他高级用法见代码区

scanf()
 1.库： #include <stdio.h>
 2.常见用法：scanf("格式说明字符串",&<变量>,<字符数组>.....)
         &<变量>  代表该变量的地址   格式说明字符串中只能含有%d等说明符，其他的不要加，可能出现意想不到的问题
         <字符数组> 不需要加&，本身就代表数组的地址    返回读取变量的个数
 3.scanf()常用字段类型说明符  例2-8
 %d： － 以十进制方式输入带标记整数                  int 十进制
 %u： － 以十进制方式输入无符号整数                  int 十进制
 %x   — 以十六进制方式输入整数                     int 十六进制
 %o： － 以八进制方式输入整数                       int 八进制
 %f： － 单精度实数；                              float
 %lf：－ 双精度实数；                              double
 %c： － 输出单个字符；                           char
 %s： － 输出字符串。
 空格  -读取接下来的空格，并作废（用于在读入字符前清除空格）（格式化字符串末尾不能用空格和\n）
 %lld  -以十进制方式输入长整型 （linux系统）         long long
 %I64d -以十进制方式输入长整型 （windows系统）       long long
 4.例2-11 计算实数乘积的整数部分
 5.scanf()只读入符合格式要求的输入数据。 如输入123x scanf("%d",&a)中scanf()只读取123，留下x给后续的输入操作；输入xy123，则不读取
   所以需要getchar()去清空未读取的数据
   while (getchar()!='\n');
 6.scanf()判定多组数据输入是否结束
    while ((scanf("%d%d",&a,&b))!=EOF){}
 7.读取数据AM 12:00可以采用scanf("%c%c %d:%d ",&a1,&k,&h1,&m1)   空格会读取所有的空格
 也可以getchar()和普通scanf()配合使用多次读取













 */